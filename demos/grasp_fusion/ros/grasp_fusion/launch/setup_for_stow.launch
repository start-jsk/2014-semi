<launch>

  <arg name="stereo" default="true" />
  <arg name="load_driver" default="true" />

  <!-- get machine tag -->
  <include file="$(find jsk_arc2017_baxter)/launch/setup/include/baxter.machine" />

  <!-- hand mounted camera -->
  <group if="$(arg stereo)">
    <!-- FIXME: Make calib params common to jsk_arc2017_baxter -->
    <!-- <include file="$(find jsk_arc2017_baxter)/launch/setup/include/stereo_astra_hand.launch"> -->
    <include file="$(find grasp_fusion)/launch/include/stereo_astra_hand.launch">
      <arg name="load_driver" value="$(arg load_driver)" />
      <arg name="pick" value="false" />
    </include>
  </group>
  <group unless="$(arg stereo)">
    <include file="$(find jsk_arc2017_baxter)/launch/setup/include/astra_hand.launch">
      <arg name="load_driver" value="$(arg load_driver)" />
    </include>
  </group>

  <!-- weight scale -->
  <include file="$(find jsk_arc2017_baxter)/launch/setup/include/scale.launch" />

  <arg name="LEFT_CAMERA_INFO" if="$(arg stereo)" value="/left_hand_camera/fused/rgb/camera_info" />
  <arg name="LEFT_INPUT_CLOUD" if="$(arg stereo)" value="/left_hand_camera/fused/depth_registered/points" />
  <arg name="LEFT_INPUT_DEPTH" if="$(arg stereo)" value="/left_hand_camera/fused/depth_registered/image_rect" />
  <arg name="LEFT_INPUT_IMAGE" if="$(arg stereo)" value="/left_hand_camera/left/rgb/image_rect_color" />
  <arg name="LEFT_MANAGER" if="$(arg stereo)" value="/left_hand_camera/left/left_nodelet_manager" />
  <!-- FIXME: We cannot launch pipeline for right hand camera due to shortage of GPU memory-->
  <!-- <arg name="RIGHT_CAMERA_INFO" if="$(arg stereo)" value="/right_hand_camera/fused/rgb/camera_info" /> -->
  <!-- <arg name="RIGHT_INPUT_CLOUD" if="$(arg stereo)" value="/right_hand_camera/fused/depth_registered/points" /> -->
  <!-- <arg name="RIGHT_INPUT_DEPTH" if="$(arg stereo)" value="/right_hand_camera/fused/depth_registered/image_rect" /> -->
  <!-- <arg name="RIGHT_INPUT_IMAGE" if="$(arg stereo)" value="/right_hand_camera/left/rgb/image_rect_color" /> -->
  <!-- <arg name="RIGHT_MANAGER" if="$(arg stereo)" value="/right_hand_camera/left/left_nodelet_manager" /> -->

  <arg name="LEFT_CAMERA_INFO" unless="$(arg stereo)" value="/left_hand_camera/depth_registered/camera_info" />
  <arg name="LEFT_INPUT_CLOUD" unless="$(arg stereo)" value="/left_hand_camera/depth_registered/points" />
  <arg name="LEFT_INPUT_DEPTH" unless="$(arg stereo)" value="/left_hand_camera/depth_registered/image_rect" />
  <arg name="LEFT_INPUT_IMAGE" unless="$(arg stereo)" value="/left_hand_camera/rgb/image_rect_color" />
  <arg name="LEFT_MANAGER" unless="$(arg stereo)" value="/left_hand_camera/left_hand_camera_nodelet_manager" />
  <!-- FIXME: We cannot launch pipeline for right hand camera due to shortage of GPU memory-->
  <!-- <arg name="RIGHT_CAMERA_INFO" unless="$(arg stereo)" value="/right_hand_camera/depth_registered/camera_info" /> -->
  <!-- <arg name="RIGHT_INPUT_CLOUD" unless="$(arg stereo)" value="/right_hand_camera/depth_registered/points" /> -->
  <!-- <arg name="RIGHT_INPUT_DEPTH" unless="$(arg stereo)" value="/right_hand_camera/depth_registered/image_rect" /> -->
  <!-- <arg name="RIGHT_INPUT_IMAGE" unless="$(arg stereo)" value="/right_hand_camera/rgb/image_rect_color" /> -->
  <!-- <arg name="RIGHT_MANAGER" unless="$(arg stereo)" value="/right_hand_camera/right_hand_camera_nodelet_manager" /> -->

  <arg name="VOXEL_SIZE" value="0.002" />
  <arg name="HEIGHTMAP_TF_FRAME" value="left_hand_heightmap_frame" />

  <group ns="left_hand_camera">
    <!-- This pipeline takes 1.6G + 1.6G + 5.1G = 8.3G GPU memory -->
    <node name="bbox_array_to_bbox"
          pkg="nodelet" type="nodelet"
          args="standalone jsk_pcl_utils/BoundingBoxArrayToBoundingBox">
      <remap from="~input" to="/transformable_tote_markers/output/boxes" />
      <rosparam>
        index: 0
      </rosparam>
    </node>

    <!-- Heightmap Generation -->
    <include file="$(find grasp_fusion)/launch/include/get_heightmap.launch">
      <arg name="INPUT_BBOX" value="bbox_array_to_bbox/output" />
      <arg name="BBOX_TF_FRAME" value="left_hand_heightmap_bbox" />
      <arg name="VOXEL_SIZE" value="$(arg VOXEL_SIZE)" />
      <arg name="HEIGHTMAP_TRANS" value="-0.2 0.25 -0.15 -1.5707963267948966 0 0" />
      <arg name="HEIGHTMAP_TF_FRAME" value="$(arg HEIGHTMAP_TF_FRAME)" />
      <arg name="INPUT_RGB" value="$(arg LEFT_INPUT_IMAGE)" />
      <arg name="INPUT_DEPTH" value="$(arg LEFT_INPUT_DEPTH)" />
      <arg name="CAMERA_INFO" value="$(arg LEFT_CAMERA_INFO)" />
    </include>

    <!-- Affordance Segmentation -->
    <node name="suction_affordance_segmentation"
          pkg="grasp_fusion" type="affordance_segmentation.py"
          clear_params="true">
      <remap from="~input/rgb" to="get_heightmap/output/rgb" />
      <remap from="~input/depth" to="get_heightmap/output/depth" />
      <rosparam subst_value="true">
        affordance: suction
      </rosparam>
    </node>
    <node name="pinch_affordance_segmentation"
          pkg="grasp_fusion" type="affordance_segmentation.py"
          clear_params="true">
      <remap from="~input/rgb" to="get_heightmap/output/rgb" />
      <remap from="~input/depth" to="get_heightmap/output/depth" />
      <rosparam subst_value="true">
        affordance: pinch
      </rosparam>
    </node>

    <!-- Instance Segmentation -->
    <node name="attention_clipper"
          pkg="nodelet" type="nodelet"
          args="load jsk_pcl/AttentionClipper $(arg LEFT_MANAGER)">
      <remap from="~input" to="$(arg LEFT_CAMERA_INFO)" />
      <remap from="~input/points" to="$(arg LEFT_INPUT_CLOUD)" />
      <remap from="~input/box" to="bbox_array_to_bbox/output" />
      <rosparam subst_value="true">
        use_multiple_attention: false
      </rosparam>
    </node>
    <node name="indices_to_mask"
          pkg="nodelet" type="nodelet"
          args="load jsk_pcl_utils/PointIndicesToMaskImage $(arg LEFT_MANAGER)">
      <remap from="~input" to="attention_clipper/output/point_indices" />
      <remap from="~input/image" to="$(arg LEFT_INPUT_IMAGE)" />
    </node>
    <node name="dilate_mask"
          pkg="nodelet" type="nodelet"
          args="load jsk_perception/DilateMaskImage $(arg LEFT_MANAGER)">
      <remap from="~input" to="indices_to_mask/output" />
      <rosparam subst_value="true">
        method: 2
        size: 8
        iterations: 4
      </rosparam>
    </node>
    <node name="apply_mask"
          pkg="nodelet" type="nodelet"
          args="load jsk_perception/ApplyMaskImage $(arg LEFT_MANAGER)">
      <remap from="~input" to="$(arg LEFT_INPUT_IMAGE)" />
      <remap from="~input/mask" to="dilate_mask/output" />
      <rosparam subst_value="true">
        clip: false
      </rosparam>
    </node>
    <node name="mask_rcnn_instance_segmentation"
          pkg="grasp_fusion" type="mask_rcnn_instance_segmentation.py"
          clear_params="true">
      <!-- <remap from="~input" to="$(arg LEFT_INPUT_IMAGE)" /> -->
      <remap from="~input" to="apply_mask/output" />
      <rosparam subst_value="true">
        gpu: 0
        fg_class_names:
          - object
        pretrained_model: $(env HOME)/data/grasp_fusion_lib/grasp_fusion/models/instance_segmentation_model.npz
      </rosparam>
    </node>
    <node name="get_heightmap_label"
          pkg="grasp_fusion" type="get_heightmap.py"
          clear_params="true">
      <remap from="~input/label" to="mask_rcnn_instance_segmentation/output/label_ins" />
      <remap from="~input/depth" to="$(arg LEFT_INPUT_DEPTH)" />
      <remap from="~input/camera_info" to="$(arg LEFT_CAMERA_INFO)" />
      <rosparam subst_value="true">
        bg_label: -1
        heightmap_frame: $(arg HEIGHTMAP_TF_FRAME)
        voxel_size: $(arg VOXEL_SIZE)
      </rosparam>
    </node>

    <!-- Sole Affordance Segmentation -->
    <node name="pinch_sole_affordance_segmentation"
          pkg="grasp_fusion" type="sole_affordance_segmentation.py"
          clear_params="true">
      <remap from="~input/rgb" to="get_heightmap/output/rgb" />
      <remap from="~input/depth" to="get_heightmap/output/depth" />
      <remap from="~input/label_ins" to="get_heightmap_label/output/label" />
      <rosparam subst_value="true">
        affordance: pinch
      </rosparam>
    </node>

    <!-- Primitive Matching -->
    <node name="primitive_matching"
          pkg="grasp_fusion" type="primitive_matching.py" output="screen">
      <remap from="~input/rgb" to="get_heightmap/output/rgb" />
      <remap from="~input/depth" to="get_heightmap/output/depth" />
      <remap from="~input/label_instance" to="get_heightmap_label/output/label" />
      <remap from="~input/prob_pinch_affordance" to="pinch_affordance_segmentation/output/prob" />
      <remap from="~input/prob_pinch_sole_affordance" to="pinch_sole_affordance_segmentation/output/prob" />
      <remap from="~input/prob_suction_affordance" to="suction_affordance_segmentation/output/prob" />
      <rosparam subst_value="true">
        instance_bg_label: -1
        heightmap_frame: $(arg HEIGHTMAP_TF_FRAME)
        voxel_size: $(arg VOXEL_SIZE)
        cluster_tolerance: 0.02
        cluster_max_size: 0.2
        cluster_min_size: 0.001
        prob_threshold: 0.5
        reliable_pts_ratio: 1
        primitive_dir: $(find grasp_fusion)/config/primitives
      </rosparam>
    </node>

    <!-- Euclidean Clustering in Tote for Comparison -->
    <node name="transformable_small_tote_server"
          pkg="jsk_interactive_marker" type="transformable_server_sample">
      <rosparam subst_value="true">
        display_interactive_manipulator: true
        display_interactive_manipulator_only_selected: true
        display_description_only_selected: true
      </rosparam>
    </node>
    <node name="transformable_small_tote_markers"
          pkg="jsk_interactive_marker" type="transformable_markers_client.py">
      <remap from="~server" to="transformable_small_tote_server" />
      <rosparam subst_value="true">
        config_file: $(find grasp_fusion)/config/stow_task/small_tote_marker.yaml
        config_auto_save: true  <!-- Use true to save config updated on rviz -->
      </rosparam>
    </node>
    <node name="small_tote_array_to_bbox"
          pkg="nodelet" type="nodelet"
          args="standalone jsk_pcl_utils/BoundingBoxArrayToBoundingBox">
      <remap from="~input" to="transformable_small_tote_markers/output/boxes" />
      <rosparam>
        index: 0
      </rosparam>
    </node>
    <node name="attention_clipper_small_tote"
          pkg="nodelet" type="nodelet"
          args="load jsk_pcl/AttentionClipper $(arg LEFT_MANAGER)">
      <remap from="~input" to="$(arg LEFT_CAMERA_INFO)" />
      <remap from="~input/points" to="$(arg LEFT_INPUT_CLOUD)" />
      <remap from="~input/box" to="small_tote_array_to_bbox/output" />
      <rosparam subst_value="true">
        use_multiple_attention: false
      </rosparam>
    </node>
    <node name="extract_indices_small_tote"
          pkg="nodelet" type="nodelet"
          args="load jsk_pcl/ExtractIndices $(arg LEFT_MANAGER)">
      <remap from="~input" to="$(arg LEFT_INPUT_CLOUD)" />
      <remap from="~indices" to="attention_clipper_small_tote/output/point_indices" />
      <rosparam>
        keep_organized: true
        approximate_sync: true
        max_queue_size: 100
      </rosparam>
    </node>
    <node name="resize_points_publisher_small_tote"
          pkg="nodelet" type="nodelet"
          args="load jsk_pcl/ResizePointsPublisher $(arg LEFT_MANAGER)">
      <remap from="~input" to="extract_indices_small_tote/output" />  <!-- depth timestamp -->
      <rosparam>
        step_x: 2
        step_y: 2
      </rosparam>
    </node>
    <node name="euclidean_clustering_small_tote"
          pkg="nodelet" type="nodelet"
          args="load jsk_pcl/EuclideanClustering $(arg LEFT_MANAGER)">
      <remap from="~input" to="resize_points_publisher_small_tote/output" />  <!-- depth timestamp -->
      <rosparam>
        min_size: 10
        max_size: 25000
        tolerance: 0.12
      </rosparam>
    </node>
    <node name="cluster_indices_decomposer_small_tote"
          pkg="nodelet" type="nodelet"
          args="load jsk_pcl/ClusterPointIndicesDecomposer $(arg LEFT_MANAGER)">
      <remap from="~input" to="resize_points_publisher_small_tote/output" />  <!-- depth timestamp -->
      <remap from="~target" to="euclidean_clustering_small_tote/output" />  <!-- depth timestamp -->
      <rosparam subst_value="true">
        approximate_sync: false
        queue_size: 100
        sort_by: -cloud_size
        align_boxes: true
        align_boxes_with_plane: false
        use_pca: true
        target_frame_id: base
      </rosparam>
    </node>

    <!-- Visualization -->
    <node name="image_view"
          pkg="image_view" type="image_view"
          clear_params="true">
      <remap from="image" to="primitive_matching/output/debug" />
    </node>
    <node name="extract_indices"
          pkg="nodelet" type="nodelet"
          args="load jsk_pcl/ExtractIndices $(arg LEFT_MANAGER)">
      <remap from="~input" to="$(arg LEFT_INPUT_CLOUD)" />
      <remap from="~indices" to="attention_clipper/output/point_indices" />
      <rosparam>
        keep_organized: true
        approximate_sync: true
        max_queue_size: 100
      </rosparam>
    </node>
    <node name="passthrough_points"
          pkg="nodelet" type="nodelet"
          args="load jsk_topic_tools/Passthrough $(arg LEFT_MANAGER)">
      <remap from="~input" to="extract_indices/output" />
      <rosparam subst_value="true">
        default_duration: 2
      </rosparam>
    </node>

    <!-- weight change detector -->
    <node name="weight_change_detector"
          pkg="grasp_fusion" type="weight_change_detector.py">
      <rosparam>
        approximate_sync: true
        queue_size: 10
        input_topics:
          - /scale0/output
          - /scale1/output
          - /scale2/output
          - /scale3/output
        error: 10.0
      </rosparam>
    </node>
  </group>  <!-- ns="left_hand_camera" -->

  <!-- FIXME: We cannot launch pipeline for right hand camera due to shortage of GPU memory-->
  <!--
  <group ns="right_hand_camera">
  </group>
  -->

</launch>
