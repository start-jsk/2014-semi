#!/usr/bin/env roseus
;; vim: set ft=lisp:
;; -*- mode: lisp;-*-

(load "main.l")

(defun test-init (&optional (ctype :default-controller))
  (jsk_2015_05_baxter_apc::baxter-init :ctype ctype)
  (objects (list *baxter*))
  t)

(setq *oreointote* (make-coords :pos #f(785 -35 -320)))
(send *oreointote* :rotate (/ pi 4.0) :z)
(setq *aboveoreo* (send *oreointote* :copy-coords))
(send *aboveoreo* :translate #f(0 0 180))
(send *oreointote* :rotate (/ pi 6.0) :y)
(send *aboveoreo* :rotate (/ pi 6.0) :y)
(setq *viapoint1* (make-coords :pos #f(850 0 390) :rpy (float-vector (/ pi 4.0) 0 0)))
(setq *goal1* (make-coords :pos #f(1200 0 390)))
(setq *viapoint2* (make-coords :pos #f(850 0 610) :rpy (float-vector (/ pi 4.0) 0 0)))
(setq *goal2* (make-coords :pos #f(1200 0 610) :rpy (float-vector (/ pi 12) 0 0)))
(setq *goal* *goal1*)
(setq *viapoint* *viapoint1*)
(defvar viaangle)

(defun reset2aboveoreo ()
  (send *baxter* :rarm :inverse-kinematics *aboveoreo* :rotation-axis :z :debug-view t))

(defun above2oreo ()
  (send *baxter* :rarm :inverse-kinematics *oreointote* :rotation-axis :z :debug-view t))


(defun oreo2via ()
  (send *baxter* :rarm :inverse-kinematics *viapoint* :rotation-axis t :debug-view t)
  (send *baxter* :rarm :inverse-kinematics *goal* :rotation-axis t :debug-view t)
  (send *baxter* :rarm :inverse-kinematics *viapoint* :rotation-axis t :debug-view t)
  (setq viaangle (send *baxter* :angle-vector)))



(defun via2bin ()
  (send *baxter* :rarm :inverse-kinematics *goal* :rotation-axis :z :debug-view t))

(defun back_bin2via ()
  (send *baxter* :rarm :inverse-kinematics *viapoint* :rotation-axis t :debug-view t))

(defun back_via2reset ()
  (send *baxter* :reset-pose))

(defun via1tovia2 ()
  (send *baxter* :rarm :inverse-kinematics *viapoint2* :rotation-axis t :debug-view t))

(defun via2tobin ()
  (send *baxter* :rarm :inverse-kinematics *goal2* :rotation :z :debug-view t))

(defun back_bin2via2 ()
  (send *baxter* :rarm :inverse-kinematics *viapoint2* :rotation t :debug-view t))

(defun back_via2tovia1 ()
  (send *baxter* :rarm :inverse-kinematics *viapoint1* :rotation t :debug-view t))

(defun stowmotion1 ()
  (reset2aboveoreo)
  (send *ri* :angle-vector (send *baxter* :angle-vector))
  (send *ri* :wait-interpolation)
  (above2oreo)
  (send *ri* :angle-vector (send *baxter* :angle-vector))
  (send *ri* :wait-interpolation))

(defun stowmotion2 ()
  (send *ri* :start-grasp :rarm)
  (send *ri* :wait-interpolation)
  (oreo2via)
  (send *ri* :angle-vector (send *baxter* :angle-vector))
  (send *ri* :wait-interpolation)
  (via2bin)
  (send *ri* :angle-vector (send *baxter* :angle-vector))
  (send *ri* :wait-interpolation)
  (send *ri* :stop-grasp)
  (send *ri* :wait-interpolation)
)

(defun stowmotion3 ()
  (back_bin2via)
  (send *ri* :angle-vector (send *baxter* :angle-vector))
  (send *ri* :wait-interpolation)
  (back_via2reset)
  (send *ri* :angle-vector (send *baxter* :angle-vector))
  (send *ri* :wait-interpolation)
)

(defun stowmotion4 ()
  (send *ri* :start-grasp :rarm)
  (send *ri* :wait-interpolation)
  (oreo2via)
  (send *ri* :angle-vector (send *baxter* :angle-vector))
  (send *ri* :wait-interpolation)
  (via1tovia2)
  (send *ri* :angle-vector (send *baxter* :angle-vector))
  (send *ri* :wait-interpolation)
  (via2tobin)
  (send *ri* :angle-vector (send *baxter* :angle-vector))
  (send *ri* :wait-interpolation)
  (send *ri* :stop-grasp)
  (send *ri* :wait-interpolation)
)

(defun stowmotion5 ()
  (back_bin2via2)
  (send *ri* :angle-vector (send *baxter* :angle-vector))
  (send *ri* :wait-interpolation)
  (back_via2tovia1)
  (send *ri* :angle-vector (send *baxter* :angle-vector))
  (send *ri* :wait-interpolation)
  (back_via2reset)
  (send *ri* :angle-vector (send *baxter* :angle-vector))
  (send *ri* :wait-interpolation)
)

(defun test_stow_motion ()
  (stowmotion1)
  (stowmotion2)
  (unix::sleep 6)
  (stowmotion3)
  (unix::sleep 5)
  (stowmotion1)
  (stowmotion4)
  (unix::sleep 6)
  (stowmotion5)
)
