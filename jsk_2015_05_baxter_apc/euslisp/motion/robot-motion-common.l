;; vim: set ft=lisp:
;; -*- mode: lisp;-*-

(load "package://jsk_2014_picking_challenge/euslisp/utils.l")

(defun fold-pose-up (arm)
  (let ((av-init (send *baxter* :angle-vector))
        (av-l #f(-7.80029 -1.12061 -82.9248 141.438 116.477 -6.48193 8.10791))
        (av-r #f(7.80029 -1.12061 82.9248 141.438 -116.477 -6.48193 -8.10791)))
    (case arm
      (:rarm (send *baxter* arm :angle-vector av-r))
      (:larm (send *baxter* arm :angle-vector av-l)))
    (list (midpoint 0.5 av-init (send *baxter* :angle-vector)) (send *baxter* :angle-vector))))

(defun fold-pose-mid (&optional (arm :arms))
  (let ((av-init (send *baxter* :angle-vector))
        (av-l #f(48.8672 -10.437 -80.6616 148.645 80.9033 1.38428 18.8745))
        (av-r #f(-48.8672 -10.437 80.6616 148.645 -80.9033 1.38428 -18.8745)))
    (case arm
      (:arms (progn (send *baxter* :larm :angle-vector av-l) (send *baxter* :rarm :angle-vector av-r)))
      (:larm (send *baxter* :larm :angle-vector av-l))
      (:rarm (send *baxter* :rarm :angle-vector av-r)))
    (list (midpoint 0.5 av-init (send *baxter* :angle-vector)) (send *baxter* :angle-vector))))

(defun fold-pose-low (arm)
  (let ((av-init (send *baxter* :angle-vector))
        (av-l #f(-7.27295 52.6465 -59.9414 91.582 123.574 13.3374 159.675))
        (av-r #f(7.27295 52.6465 59.9414 91.582 -123.574 13.3374 -159.675)))
    (case arm
      (:rarm (send *baxter* arm :angle-vector av-r))
      (:larm (send *baxter* arm :angle-vector av-l)))
    (list (midpoint 0.5 av-init (send *baxter* :angle-vector)) (send *baxter* :angle-vector))))

(defun fold-pose-back (arm)
  (let ((av-init (send *baxter* :angle-vector))
        (av-l #f(97.4707 -2.39502 -94.5483 134.67 91.4062 8.70117 0))
        (av-r #f(-97.4707 -2.39502 94.5483 134.67 -91.4062 8.70117 0)))
    (case arm
      (:rarm (send *baxter* arm :angle-vector av-r))
      (:larm (send *baxter* arm :angle-vector av-l)))
    (list (midpoint 0.5 av-init (send *baxter* :angle-vector)) (send *baxter* :angle-vector))))

(defun fold-to-keep-object-av (arm)
  (let ((av-l #f(77.1899 4.37256 -86.1548 123.904 11.8213 59.8096 5.53711))
        (av-r #f(-77.1899 4.37256 86.1548 123.904 -11.8213 59.8096 -5.53711)))
    (case arm
      (:larm (send *baxter* arm :angle-vector av-l))
      (:rarm (send *baxter* arm :angle-vector av-r)))
    (send *baxter* :angle-vector)))

(defun untuck-pose (arm)
  (let ((av-init (send *baxter* :angle-vector)) av-arm)
    (send *baxter* :untuck-pose)
    (setq av-arm (send *baxter* arm :angle-vector))
    (send *baxter* :angle-vector av-init)     ; back to initial pose
    (send *baxter* arm :angle-vector av-arm)  ; only move one arm
    (list (send *baxter* :angle-vector))))

(defparameter *larm-height-offset* 12)
(defparameter *larm-depth-angle* 5)
(defparameter *rarm-height-offset* 20)
(defparameter *rarm-depth-angle* 5)

(defun move-end-pos-with-interpolation (arm &key (x 0) (y 0) (z 0) (time 1500) (revert-if-fail nil) (rotation-axis :z))
  (case arm
    (:larm (setq z (+ z *larm-height-offset* (* (sin (deg2rad *larm-depth-angle*)) x))))
    (:rarm (setq z (+ z *rarm-height-offset* (* (sin (deg2rad *rarm-depth-angle*)) x))))
    )
  (send *baxter* arm :move-end-pos (float-vector x y z) :world :revert-if-fail revert-if-fail :rotation-axis rotation-axis)
  (send *irtviewer* :draw-objects)
  (send *ri* :angle-vector (send *baxter* :angle-vector) time)
  (send *ri* :wait-interpolation)
  )

(defun rotate-wrist (arm angle &key (angle-method :relative))
  (let (wrist-index)
    (case arm
      (:larm (setq wrist-index 7))
      (:rarm (setq wrist-index 14)))
    (setq av (send *baxter* :angle-vector))
    (setf (elt av wrist-index) (+ (elt av wrist-index) angle))
    (send *baxter* :angle-vector av)))

(defun look-at-other-side (arm)
  (let (av)
    (setq av (send *baxter* :angle-vector))
    (case arm
      (:larm (setf (aref av 0) -90))
      (:rarm (setf (aref av 0) 90)))
    (send *baxter* :angle-vector av)))

(defmethod baxter-robot
  (:fold-pose
    ()
    (let (av)
      (fold-pose-back :larm)
      (fold-pose-back :rarm)
      (setq av (send *baxter* :angle-vector))
      (setf (aref av 0) 0)
      (send *baxter* :angle-vector av))))

(defmethod pod-lowres-object
  ; local coordinates of each target bin
  ; these are the entrances
  (:a () (send self :transform-vector #f(-280 1660 400)))
  (:b () (send self :transform-vector #f(   0 1660 400)))
  (:c () (send self :transform-vector #f( 280 1660 400)))
  (:d () (send self :transform-vector #f(-280 1430 400)))
  (:e () (send self :transform-vector #f(   0 1430 400)))
  (:f () (send self :transform-vector #f( 280 1430 400)))
  (:g () (send self :transform-vector #f(-280 1200 400)))
  (:h () (send self :transform-vector #f(   0 1200 400)))
  (:i () (send self :transform-vector #f( 280 1200 400)))
  (:j () (send self :transform-vector #f(-280  940 400)))
  (:k () (send self :transform-vector #f(   0  940 400)))
  (:l () (send self :transform-vector #f( 280  940 400)))
  (:bin-list () '(:a :b :c :d :e :f :g :h :i :j :k :l)))

(defun avoid-shelf-pose-for-bin (arm bin)
  (send *baxter* arm :angle-vector
        (case bin
          (:a #f(3.51562 -1.56006 -174.946 123.86 113.533 90.6372 -38.4961))
          (:b (case arm
                (:larm #f(-12.6562 -12.9639 -155.654 113.884 118.718 79.1235 -48.8013))
                (:rarm #f(12.6562 -12.9639 155.654 113.884 -118.718 79.1235 48.8013))))
          (:c #f(-3.51562 -1.56006 174.946 123.86 -113.533 90.6372 38.4961))
          (:d #f(79.8926 -14.2822 -125.793 148.271 -46.3623 -4.24072 100.063))
          (:e (case arm
                (:larm #f(54.1406 -52.8662 -130.583 142.8 3.27393 -32.5854 27.5098))
                (:rarm #f(-54.1406 -52.8662 130.583 142.8 -3.27393 -32.5854 -27.5098))))
          (:f #f(-79.8926 -14.2822 125.793 148.271 46.3623 -4.24072 -100.063))
          (:g #f(93.5156 10.5908 -83.3203 136.318 11.1621 44.6045 95.4272))
          (:h (case arm
                (:larm #f(13.7988 32.8711 -78.772 147.48 2.87842 -45.0 122.937))
                (:rarm #f(-13.7988 32.8711 78.772 147.48 -2.87842 -45.0 -122.937))))
          (:i #f(-93.5156 10.5908 83.3203 136.318 -11.1621 44.6045 -95.4272))
          (:j #f(89.4946 6.02051 -56.0083 139.351 34.1895 22.6538 98.2397))
          (:k (case arm
                (:larm #f(48.2959 18.6108 -51.7896 135.044 48.186 6.87744 89.3408))
                (:rarm #f(-48.2959 18.6108 51.7896 135.044 -48.186 6.87744 -89.3408))))
          (:l #f(-89.4946 6.02051 56.0083 139.351 -34.1895 22.6538 -98.2397))
          ))
  (send *baxter* :angle-vector))

(defun move-to-wait-pose (arm bin)
  (let ((avs)
        (diff1 (norm (v- (send *ri* :state :potentio-vector) (avoid-shelf-pose-for-bin arm bin))))
        (diff2 (norm (v- (send *ri* :state :potentio-vector) (send *baxter* :fold-pose)))))
    (if (> diff1 diff2)
      (pushback (send *baxter* :fold-pose) avs)
      (progn (pushback (avoid-shelf-pose-for-bin arm bin) avs)
             (pushback (send *baxter* :fold-pose) avs)))
    (send *ri* :angle-vector-sequence avs)
    (send *ri* :wait-interpolation)
    avs))
