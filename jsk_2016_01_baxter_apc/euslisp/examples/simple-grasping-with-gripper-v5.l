(require "package://jsk_2016_01_baxter_apc/euslisp/main.l")


;; ---------------
;; CONSTANT VALUES
;; ---------------
(setq *arm* :rarm)


(defun go-initial ()
  (send *ri* :stop-grasp *arm*)
  (send *baxter* :angle-vector (send *ri* :state :potentio-vector))
  (send *baxter* :slide-gripper *arm* 0 :relative nil)
  (send *baxter* :rotate-gripper *arm* 0 :relative nil)
  (send *ri* :angle-vector (send *baxter* :angle-vector) 1500)
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pre-pose *arm* :opposed) 1500)
  (send *ri* :wait-interpolation)
  )

(defun wait-user
  (prompt)
  (let res
    (setq res (y-or-n-p prompt))
    (send *baxter* :angle-vector (send *ri* :state :potentio-vector))
    res))

(defun demo-init
  (&key (ctype :default-controller))
  (jsk_2016_01_baxter_apc::baxter-init :ctype ctype)
  (go-initial)
  (objects (list *baxter*))
  t)

(defun opposed-with-suction ()
  (go-initial)
  (unless (wait-user "Start grasp?") (return-from opposed-with-suction nil))
  (send *ri* :start-grasp *arm*)
  (unix::sleep 3)
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pose *arm* :opposed) 1500)
  (unless (wait-user "Release object?") (return-from opposed-with-suction nil))
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pre-pose *arm* :opposed) 1500)
  (send *ri* :stop-grasp *arm*)
  )

(defun opposed-without-suction ()
  (go-initial)
  (send *ri* :angle-vector (send *baxter* :rotate-gripper *arm* 90 :relative nil) 1500)
  (send *ri* :wait-interpolation)
  (unless (wait-user "Start grasp?") (return-from opposed-without-suction nil))
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pose *arm* :opposed) 1500)
  (unless (wait-user "Release object?") (return-from opposed-without-suction nil))
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pre-pose *arm* :opposed) 1500)
  )

(defun spherical-with-suction ()
  (go-initial)
  (send *baxter* :slide-gripper *arm* 0 :relative nil)
  (send *baxter* :rotate-gripper *arm* -45 :relative nil)
  (send *ri* :angle-vector (send *baxter* :angle-vector) 1500)
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pre-pose *arm* :spherical) 1500)
  (send *ri* :wait-interpolation)
  (send *ri* :start-grasp *arm*)
  (unless (wait-user "Start grasp?") (return-from spherical-with-suction nil))
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pose *arm* :spherical) 1500)
  (unless (wait-user "Release object?") (return-from spherical-with-suction nil))
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pre-pose *arm* :spherical) 1500)
  (send *ri* :stop-grasp *arm*)
  )

(defun spherical-without-suction ()
  (go-initial)
  (send *baxter* :slide-gripper *arm* 0 :relative nil)
  (send *baxter* :rotate-gripper *arm* -45 :relative nil)
  (send *ri* :angle-vector (send *baxter* :angle-vector) 1500)
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pre-pose *arm* :spherical) 1500)
  (send *ri* :wait-interpolation)
  (unless (wait-user "Start grasp?") (return-from spherical-without-suction nil))
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pose *arm* :spherical) 1500)
  (unless (wait-user "Release object?") (return-from spherical-without-suction nil))
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pre-pose *arm* :spherical) 1500)
  )

(defun cylindrical-with-suction
  (&key (object :thin))
  (go-initial)
  (cond
    ((eq object :thin)
     (send *baxter* :slide-gripper *arm* 80 :relative nil)
     (send *baxter* :rotate-gripper *arm* -90 :relative nil)
     (send *ri* :angle-vector (send *baxter* :angle-vector) 1500))
    ((eq object :cylinder)
     (send *baxter* :slide-gripper *arm* 0 :relative nil)
     (send *baxter* :rotate-gripper *arm* -45 :relative nil)
     (send *ri* :angle-vector (send *baxter* :angle-vector) 1500))
    (t (error "Don't know ~A~%" object)))
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pre-pose *arm* :cylindrical) 1500)
  (send *ri* :wait-interpolation)
  (unless (wait-user "Start sucking?") (return-from cylindrical-with-suction nil))
  (send *ri* :start-grasp *arm*)
  (unless (wait-user "Start grasp?") (return-from cylindrical-with-suction nil))
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pose *arm* :cylindrical) 1500)
  (unless (wait-user "Release object?") (return-from cylindrical-with-suction nil))
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pre-pose *arm* :cylindrical) 1500)
  (send *ri* :stop-grasp *arm*)
  )

(defun cylindrical-without-suction
  (&key (object :cylinder) (angle -45))
  (go-initial)
  (cond
    ((eq object :cylinder)
     (send *baxter* :slide-gripper *arm* 80 :relative nil)
     (send *baxter* :rotate-gripper *arm* 0 :relative nil)
     (send *ri* :angle-vector (send *baxter* :angle-vector) 1500)
     (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pre-pose *arm* :cylindrical) 1500)
     (send *ri* :wait-interpolation)
     (unless (wait-user "Start grasp?") (return-from cylindrical-without-suction nil))
     (send *baxter* :rotate-gripper *arm* angle :relative nil)
     (send *ri* :angle-vector (send *baxter* :angle-vector) 1500)
     (send *ri* :wait-interpolation)
     (send *baxter* :slide-gripper *arm* 0 :relative nil)
     (send *ri* :angle-vector (send *baxter* :angle-vector) 1500)
     (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pose *arm* :cylindrical) 1500)
     (send *ri* :wait-interpolation)
     (unless (wait-user "Release object?") (return-from cylindrical-without-suction nil))
     (send *baxter* :rotate-gripper *arm* 0 :relative nil)
     (send *baxter* :slide-gripper *arm* 80 :relative nil)
     (send *ri* :angle-vector (send *baxter* :angle-vector) 1500)
     (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pre-pose *arm* :cylindrical) 1500)
     (send *ri* :wait-interpolation)
     )
    (t (error "Don't know ~A~%" object)))
  )
