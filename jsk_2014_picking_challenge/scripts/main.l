(load "package://baxtereus/baxter-interface.l")

(defun init ()
  (baxter-init)
  (send *baxter* :locate #f(0 0 950) :world)
  (objects (list *baxter*)))


(defun test-1 ()
  (send *baxter* :larm :shoulder-y :joint-angle -30)
  (send *baxter* :larm :shoulder-p :joint-angle -30)
  (send *baxter* :larm :elbow-r  :joint-angle 30)
  (send *baxter* :larm :elbow-p  :joint-angle 90)
  (send *baxter* :larm :wrist-r  :joint-angle 30)
  (send *baxter* :larm :wrist-p  :joint-angle -30)
  (send *baxter* :head :neck-y   :joint-angle -30)
  (objects (list *baxter*))
  (send *ri* :angle-vector (send *baxter* :angle-vector) 3000)
  )

(defun test-2 ()
  (let ()
    (setq *box* (make-cube 100 100 200))
    (send *box* :set-color :blue)
    (do ((z 1100 (+ z 100)))
        ((>= z 1500))
        (do ((y 0 (+ y 100)))
            ((>= y 500))
            (print (list 900 y z))
            (send *baxter* :reset-pose)
            (send *box* :locate (float-vector 900 y z) :world)
            (objects (list *baxter* *box*))
            (send *baxter* :larm :inverse-kinematics *box* :rotation-axis :z :debug-view :no-message)
            (send *baxter* :look-at-hand :larm)
            (send *irtviewer* :draw-objects)
            (send *ri* :angle-vector (send *baxter* :angle-vector) 3000)
            (send *ri* :wait-interpolation)
            ))
    ))

(defun test-3 ()
  (let (i c b)
    (when (not (boundp '*pod*))
      (load "package://jsk_2014_picking_challenge/scripts/pod-lowres.l"))
    (send *pod* :locate #f(1200 0 0) :world)
    (send *pod* :orient pi/2 :z :world)
    (send *baxter* :locate #f(0 0 950) :world)
    (objects (list *baxter* *pod*))
    (setq *targets* nil i 0)
    (dotimes (z 7)
      (dotimes (x 4)
        (cond ((< z 3)
               (setq c (send *pod* :transform-vector (float-vector (+ (* x 200) -310) 400 (+ (* z 370) 550)))))
              ((< z 4)
               (setq c (send *pod* :transform-vector (float-vector (+ (* x 200) -310) 400 (+ (* (- z 3) 370) 1550)))))
              (t
               (setq c (send *pod* :transform-vector (float-vector (+ (* x 200) -310) 400 (+ (* (- z 4) 250) 1800))))))
        (setq b (make-cube 25 25 100 :pos c))
        (send b :set-color (elt gl::*face-colors* (* i 10)))
        (objects b)
        (set (intern (format nil "TARGET_~A" i)) b)
        (push (eval (intern (format nil "TARGET_~A" i))) *targets*)
        (incf i)
        ))
    (dolist (target *targets*)
      (setq r (send *baxter* :larm :inverse-kinematics target
                    :rotation-axis :z
                    :debug-view :no-message))
      (if r (send target :set-color :red)
        (progn
          (setq r (send *baxter* :larm :inverse-kinematics target
                        :rotation-axis nil
                        :debug-view :no-message))
          (if r (send target :set-color :magenta))))

      (send *irtviewer* :draw-objects)
      (x::window-main-one)
      )
    ))

